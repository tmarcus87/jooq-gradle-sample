import groovy.xml.MarkupBuilder
import static javax.xml.bind.JAXB.unmarshal;

version = '1.0'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.jooq:jooq-codegen:3.5.0'
        classpath 'mysql:mysql-connector-java:5.1.34'
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    ext {
        springBootVersion = "1.2.1.RELEASE"
        jooqVersion = "3.5.0"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

project("core") {
    dependencies {
        compile project(":data")
        compile "org.springframework.boot:spring-boot-starter:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-jdbc:$springBootVersion"
        testCompile 'junit:junit:4.11'
        testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    }
}

project("data") {
    dependencies {
        compile 'mysql:mysql-connector-java:5.1.34'
        compile "org.jooq:jooq:$jooqVersion"
        compile "org.jooq:jooq-meta:$jooqVersion"
        compile "org.jooq:jooq-codegen:$jooqVersion"
    }
}

def writer = new StringWriter()
new MarkupBuilder(writer).configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.5.0.xsd') {
    jdbc() {
        driver('com.mysql.jdbc.Driver')
        url('jdbc:mysql://localhost:3306/jooq-sample')
        user('test')
        password('password')
    }
    generator() {
        database() {
            name("org.jooq.util.mysql.MySQLDatabase")
            inputSchema("jooq-sample")
            includes(".*")
            excludes("")
        }
        target() {
            packageName('org.tmarcus.sandbox.data')
            directory('data/src/main/java')
        }
    }
}

org.jooq.util.GenerationTool.main(
    unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)
